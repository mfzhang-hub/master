// Generated by gencpp from file lxind_msgs/BatteryStatus.msg
// DO NOT EDIT!


#ifndef LXIND_MSGS_MESSAGE_BATTERYSTATUS_H
#define LXIND_MSGS_MESSAGE_BATTERYSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace lxind_msgs
{
template <class ContainerAllocator>
struct BatteryStatus_
{
  typedef BatteryStatus_<ContainerAllocator> Type;

  BatteryStatus_()
    : header()
    , voltage(0)
    , current(0)
    , remain_bat(0)
    , full_bat(0)
    , cell_volt()
    , tempterature()
    , batt_cycle(0)
    , design_capacity(0)
    , remaining_percentage(0)
    , is_charging(false)
    , is_battery_low(false)
    , is_battery_full(false)  {
    }
  BatteryStatus_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , voltage(0)
    , current(0)
    , remain_bat(0)
    , full_bat(0)
    , cell_volt(_alloc)
    , tempterature(_alloc)
    , batt_cycle(0)
    , design_capacity(0)
    , remaining_percentage(0)
    , is_charging(false)
    , is_battery_low(false)
    , is_battery_full(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint16_t _voltage_type;
  _voltage_type voltage;

   typedef int16_t _current_type;
  _current_type current;

   typedef uint16_t _remain_bat_type;
  _remain_bat_type remain_bat;

   typedef uint16_t _full_bat_type;
  _full_bat_type full_bat;

   typedef std::vector<uint16_t, typename ContainerAllocator::template rebind<uint16_t>::other >  _cell_volt_type;
  _cell_volt_type cell_volt;

   typedef std::vector<uint16_t, typename ContainerAllocator::template rebind<uint16_t>::other >  _tempterature_type;
  _tempterature_type tempterature;

   typedef uint16_t _batt_cycle_type;
  _batt_cycle_type batt_cycle;

   typedef uint16_t _design_capacity_type;
  _design_capacity_type design_capacity;

   typedef uint8_t _remaining_percentage_type;
  _remaining_percentage_type remaining_percentage;

   typedef uint8_t _is_charging_type;
  _is_charging_type is_charging;

   typedef uint8_t _is_battery_low_type;
  _is_battery_low_type is_battery_low;

   typedef uint8_t _is_battery_full_type;
  _is_battery_full_type is_battery_full;





  typedef boost::shared_ptr< ::lxind_msgs::BatteryStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lxind_msgs::BatteryStatus_<ContainerAllocator> const> ConstPtr;

}; // struct BatteryStatus_

typedef ::lxind_msgs::BatteryStatus_<std::allocator<void> > BatteryStatus;

typedef boost::shared_ptr< ::lxind_msgs::BatteryStatus > BatteryStatusPtr;
typedef boost::shared_ptr< ::lxind_msgs::BatteryStatus const> BatteryStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lxind_msgs::BatteryStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lxind_msgs::BatteryStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace lxind_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'lxind_msgs': ['/home/zhangchunlei/lxind_ws/src/lxind_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::lxind_msgs::BatteryStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lxind_msgs::BatteryStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lxind_msgs::BatteryStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lxind_msgs::BatteryStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lxind_msgs::BatteryStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lxind_msgs::BatteryStatus_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lxind_msgs::BatteryStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8fbc40232ad20f60cddeccd180074b14";
  }

  static const char* value(const ::lxind_msgs::BatteryStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8fbc40232ad20f60ULL;
  static const uint64_t static_value2 = 0xcddeccd180074b14ULL;
};

template<class ContainerAllocator>
struct DataType< ::lxind_msgs::BatteryStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lxind_msgs/BatteryStatus";
  }

  static const char* value(const ::lxind_msgs::BatteryStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lxind_msgs::BatteryStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
\n\
uint16 voltage\n\
int16 current\n\
\n\
uint16 remain_bat\n\
uint16 full_bat\n\
\n\
uint16[] cell_volt\n\
uint16[] tempterature\n\
uint16    batt_cycle\n\
uint16    design_capacity\n\
\n\
uint8 remaining_percentage \n\
bool is_charging\n\
bool is_battery_low\n\
bool is_battery_full\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::lxind_msgs::BatteryStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lxind_msgs::BatteryStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.voltage);
      stream.next(m.current);
      stream.next(m.remain_bat);
      stream.next(m.full_bat);
      stream.next(m.cell_volt);
      stream.next(m.tempterature);
      stream.next(m.batt_cycle);
      stream.next(m.design_capacity);
      stream.next(m.remaining_percentage);
      stream.next(m.is_charging);
      stream.next(m.is_battery_low);
      stream.next(m.is_battery_full);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BatteryStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lxind_msgs::BatteryStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lxind_msgs::BatteryStatus_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "voltage: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.voltage);
    s << indent << "current: ";
    Printer<int16_t>::stream(s, indent + "  ", v.current);
    s << indent << "remain_bat: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.remain_bat);
    s << indent << "full_bat: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.full_bat);
    s << indent << "cell_volt[]" << std::endl;
    for (size_t i = 0; i < v.cell_volt.size(); ++i)
    {
      s << indent << "  cell_volt[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.cell_volt[i]);
    }
    s << indent << "tempterature[]" << std::endl;
    for (size_t i = 0; i < v.tempterature.size(); ++i)
    {
      s << indent << "  tempterature[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.tempterature[i]);
    }
    s << indent << "batt_cycle: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.batt_cycle);
    s << indent << "design_capacity: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.design_capacity);
    s << indent << "remaining_percentage: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.remaining_percentage);
    s << indent << "is_charging: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_charging);
    s << indent << "is_battery_low: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_battery_low);
    s << indent << "is_battery_full: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_battery_full);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LXIND_MSGS_MESSAGE_BATTERYSTATUS_H
