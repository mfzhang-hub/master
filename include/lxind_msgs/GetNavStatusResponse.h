// Generated by gencpp from file lxind_msgs/GetNavStatusResponse.msg
// DO NOT EDIT!


#ifndef LXIND_MSGS_MESSAGE_GETNAVSTATUSRESPONSE_H
#define LXIND_MSGS_MESSAGE_GETNAVSTATUSRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose2D.h>

namespace lxind_msgs
{
template <class ContainerAllocator>
struct GetNavStatusResponse_
{
  typedef GetNavStatusResponse_<ContainerAllocator> Type;

  GetNavStatusResponse_()
    : curr_posi()
    , reach_state(0)
    , prec_state(0)  {
    }
  GetNavStatusResponse_(const ContainerAllocator& _alloc)
    : curr_posi(_alloc)
    , reach_state(0)
    , prec_state(0)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Pose2D_<ContainerAllocator>  _curr_posi_type;
  _curr_posi_type curr_posi;

   typedef int8_t _reach_state_type;
  _reach_state_type reach_state;

   typedef int8_t _prec_state_type;
  _prec_state_type prec_state;



  enum {
    GOAL_NOT_REACHED = 0,
    GOAL_REACHED = 1,
    GOAL_APPROACHING = 2,
    STATE_ADJUST = 0,
    STATE_WAIT = 1,
    STATE_FORWARD = 2,
    STATE_FINISHED = 3,
  };


  typedef boost::shared_ptr< ::lxind_msgs::GetNavStatusResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lxind_msgs::GetNavStatusResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetNavStatusResponse_

typedef ::lxind_msgs::GetNavStatusResponse_<std::allocator<void> > GetNavStatusResponse;

typedef boost::shared_ptr< ::lxind_msgs::GetNavStatusResponse > GetNavStatusResponsePtr;
typedef boost::shared_ptr< ::lxind_msgs::GetNavStatusResponse const> GetNavStatusResponseConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lxind_msgs::GetNavStatusResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lxind_msgs::GetNavStatusResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace lxind_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'lxind_msgs': ['/home/zhangchunlei/lxind_ws/src/lxind_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::lxind_msgs::GetNavStatusResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lxind_msgs::GetNavStatusResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lxind_msgs::GetNavStatusResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lxind_msgs::GetNavStatusResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lxind_msgs::GetNavStatusResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lxind_msgs::GetNavStatusResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lxind_msgs::GetNavStatusResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "db378f79657e7f13f64098eef9409889";
  }

  static const char* value(const ::lxind_msgs::GetNavStatusResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdb378f79657e7f13ULL;
  static const uint64_t static_value2 = 0xf64098eef9409889ULL;
};

template<class ContainerAllocator>
struct DataType< ::lxind_msgs::GetNavStatusResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lxind_msgs/GetNavStatusResponse";
  }

  static const char* value(const ::lxind_msgs::GetNavStatusResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lxind_msgs::GetNavStatusResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 GOAL_NOT_REACHED=0\n\
int8 GOAL_REACHED=1\n\
int8 GOAL_APPROACHING=2\n\
\n\
int8 STATE_ADJUST=0\n\
int8 STATE_WAIT=1\n\
int8 STATE_FORWARD=2\n\
int8 STATE_FINISHED=3\n\
\n\
geometry_msgs/Pose2D curr_posi\n\
int8 reach_state\n\
int8 prec_state\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose2D\n\
# This expresses a position and orientation on a 2D manifold.\n\
\n\
float64 x\n\
float64 y\n\
float64 theta\n\
";
  }

  static const char* value(const ::lxind_msgs::GetNavStatusResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lxind_msgs::GetNavStatusResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.curr_posi);
      stream.next(m.reach_state);
      stream.next(m.prec_state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetNavStatusResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lxind_msgs::GetNavStatusResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lxind_msgs::GetNavStatusResponse_<ContainerAllocator>& v)
  {
    s << indent << "curr_posi: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose2D_<ContainerAllocator> >::stream(s, indent + "  ", v.curr_posi);
    s << indent << "reach_state: ";
    Printer<int8_t>::stream(s, indent + "  ", v.reach_state);
    s << indent << "prec_state: ";
    Printer<int8_t>::stream(s, indent + "  ", v.prec_state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LXIND_MSGS_MESSAGE_GETNAVSTATUSRESPONSE_H
