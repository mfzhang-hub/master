// Generated by gencpp from file lxind_msgs/MapLoadStatus.msg
// DO NOT EDIT!


#ifndef LXIND_MSGS_MESSAGE_MAPLOADSTATUS_H
#define LXIND_MSGS_MESSAGE_MAPLOADSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace lxind_msgs
{
template <class ContainerAllocator>
struct MapLoadStatus_
{
  typedef MapLoadStatus_<ContainerAllocator> Type;

  MapLoadStatus_()
    : module_name()
    , map_name()
    , is_loaded(false)  {
    }
  MapLoadStatus_(const ContainerAllocator& _alloc)
    : module_name(_alloc)
    , map_name(_alloc)
    , is_loaded(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _module_name_type;
  _module_name_type module_name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _map_name_type;
  _map_name_type map_name;

   typedef uint8_t _is_loaded_type;
  _is_loaded_type is_loaded;





  typedef boost::shared_ptr< ::lxind_msgs::MapLoadStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lxind_msgs::MapLoadStatus_<ContainerAllocator> const> ConstPtr;

}; // struct MapLoadStatus_

typedef ::lxind_msgs::MapLoadStatus_<std::allocator<void> > MapLoadStatus;

typedef boost::shared_ptr< ::lxind_msgs::MapLoadStatus > MapLoadStatusPtr;
typedef boost::shared_ptr< ::lxind_msgs::MapLoadStatus const> MapLoadStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lxind_msgs::MapLoadStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lxind_msgs::MapLoadStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace lxind_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'lxind_msgs': ['/home/zhangchunlei/lxind_ws/src/lxind_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::lxind_msgs::MapLoadStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lxind_msgs::MapLoadStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lxind_msgs::MapLoadStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lxind_msgs::MapLoadStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lxind_msgs::MapLoadStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lxind_msgs::MapLoadStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lxind_msgs::MapLoadStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b3555824c32229073694e08cee0c3f84";
  }

  static const char* value(const ::lxind_msgs::MapLoadStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb3555824c3222907ULL;
  static const uint64_t static_value2 = 0x3694e08cee0c3f84ULL;
};

template<class ContainerAllocator>
struct DataType< ::lxind_msgs::MapLoadStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lxind_msgs/MapLoadStatus";
  }

  static const char* value(const ::lxind_msgs::MapLoadStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lxind_msgs::MapLoadStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string module_name\n\
string map_name\n\
bool is_loaded\n\
";
  }

  static const char* value(const ::lxind_msgs::MapLoadStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lxind_msgs::MapLoadStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.module_name);
      stream.next(m.map_name);
      stream.next(m.is_loaded);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MapLoadStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lxind_msgs::MapLoadStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lxind_msgs::MapLoadStatus_<ContainerAllocator>& v)
  {
    s << indent << "module_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.module_name);
    s << indent << "map_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.map_name);
    s << indent << "is_loaded: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_loaded);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LXIND_MSGS_MESSAGE_MAPLOADSTATUS_H
