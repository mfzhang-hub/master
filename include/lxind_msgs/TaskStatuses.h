// Generated by gencpp from file lxind_msgs/TaskStatuses.msg
// DO NOT EDIT!


#ifndef LXIND_MSGS_MESSAGE_TASKSTATUSES_H
#define LXIND_MSGS_MESSAGE_TASKSTATUSES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <lxind_msgs/TaskStatus.h>

namespace lxind_msgs
{
template <class ContainerAllocator>
struct TaskStatuses_
{
  typedef TaskStatuses_<ContainerAllocator> Type;

  TaskStatuses_()
    : statuses()  {
    }
  TaskStatuses_(const ContainerAllocator& _alloc)
    : statuses(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::lxind_msgs::TaskStatus_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::lxind_msgs::TaskStatus_<ContainerAllocator> >::other >  _statuses_type;
  _statuses_type statuses;





  typedef boost::shared_ptr< ::lxind_msgs::TaskStatuses_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lxind_msgs::TaskStatuses_<ContainerAllocator> const> ConstPtr;

}; // struct TaskStatuses_

typedef ::lxind_msgs::TaskStatuses_<std::allocator<void> > TaskStatuses;

typedef boost::shared_ptr< ::lxind_msgs::TaskStatuses > TaskStatusesPtr;
typedef boost::shared_ptr< ::lxind_msgs::TaskStatuses const> TaskStatusesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lxind_msgs::TaskStatuses_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lxind_msgs::TaskStatuses_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace lxind_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'lxind_msgs': ['/home/zhangchunlei/lxind_ws/src/lxind_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::lxind_msgs::TaskStatuses_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lxind_msgs::TaskStatuses_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lxind_msgs::TaskStatuses_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lxind_msgs::TaskStatuses_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lxind_msgs::TaskStatuses_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lxind_msgs::TaskStatuses_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lxind_msgs::TaskStatuses_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a910037bbbb83eb5213f09190db3e871";
  }

  static const char* value(const ::lxind_msgs::TaskStatuses_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa910037bbbb83eb5ULL;
  static const uint64_t static_value2 = 0x213f09190db3e871ULL;
};

template<class ContainerAllocator>
struct DataType< ::lxind_msgs::TaskStatuses_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lxind_msgs/TaskStatuses";
  }

  static const char* value(const ::lxind_msgs::TaskStatuses_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lxind_msgs::TaskStatuses_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lxind_msgs/TaskStatus[] statuses\n\
================================================================================\n\
MSG: lxind_msgs/TaskStatus\n\
uint8 STATUS_UNFINISHED = 0\n\
uint8 STATUS_SUCCEEDED = 1\n\
uint8 STATUS_FAILED = 2\n\
uint8 STATUS_PAUSED = 3\n\
\n\
#  not accepted by diaodu\n\
uint8 STATUS_STOPPED = 10    # task stopped, no need send to diaodu\n\
uint8 STATUS_OFFLINE_PAUSED = 11\n\
uint8 STATUS_SKIP = 12\n\
uint8 STATUS_EXCEPT = 13\n\
\n\
int64 task_id\n\
uint32 pri_task_cmd\n\
uint8 status\n\
";
  }

  static const char* value(const ::lxind_msgs::TaskStatuses_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lxind_msgs::TaskStatuses_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.statuses);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TaskStatuses_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lxind_msgs::TaskStatuses_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lxind_msgs::TaskStatuses_<ContainerAllocator>& v)
  {
    s << indent << "statuses[]" << std::endl;
    for (size_t i = 0; i < v.statuses.size(); ++i)
    {
      s << indent << "  statuses[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::lxind_msgs::TaskStatus_<ContainerAllocator> >::stream(s, indent + "    ", v.statuses[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // LXIND_MSGS_MESSAGE_TASKSTATUSES_H
