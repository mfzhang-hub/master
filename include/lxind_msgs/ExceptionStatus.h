// Generated by gencpp from file lxind_msgs/ExceptionStatus.msg
// DO NOT EDIT!


#ifndef LXIND_MSGS_MESSAGE_EXCEPTIONSTATUS_H
#define LXIND_MSGS_MESSAGE_EXCEPTIONSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace lxind_msgs
{
template <class ContainerAllocator>
struct ExceptionStatus_
{
  typedef ExceptionStatus_<ContainerAllocator> Type;

  ExceptionStatus_()
    : header()
    , isShow(false)
    , warnMode(0)
    , warnid(0)
    , name()
    , prompt()
    , leftWarnText()
    , middleWarnText()
    , rightWarnText()
    , leftWarnId(0)
    , middleWarnId(0)
    , rightWarnId(0)  {
    }
  ExceptionStatus_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , isShow(false)
    , warnMode(0)
    , warnid(0)
    , name(_alloc)
    , prompt(_alloc)
    , leftWarnText(_alloc)
    , middleWarnText(_alloc)
    , rightWarnText(_alloc)
    , leftWarnId(0)
    , middleWarnId(0)
    , rightWarnId(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _isShow_type;
  _isShow_type isShow;

   typedef uint8_t _warnMode_type;
  _warnMode_type warnMode;

   typedef uint8_t _warnid_type;
  _warnid_type warnid;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _prompt_type;
  _prompt_type prompt;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _leftWarnText_type;
  _leftWarnText_type leftWarnText;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _middleWarnText_type;
  _middleWarnText_type middleWarnText;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _rightWarnText_type;
  _rightWarnText_type rightWarnText;

   typedef uint8_t _leftWarnId_type;
  _leftWarnId_type leftWarnId;

   typedef uint8_t _middleWarnId_type;
  _middleWarnId_type middleWarnId;

   typedef uint8_t _rightWarnId_type;
  _rightWarnId_type rightWarnId;





  typedef boost::shared_ptr< ::lxind_msgs::ExceptionStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lxind_msgs::ExceptionStatus_<ContainerAllocator> const> ConstPtr;

}; // struct ExceptionStatus_

typedef ::lxind_msgs::ExceptionStatus_<std::allocator<void> > ExceptionStatus;

typedef boost::shared_ptr< ::lxind_msgs::ExceptionStatus > ExceptionStatusPtr;
typedef boost::shared_ptr< ::lxind_msgs::ExceptionStatus const> ExceptionStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lxind_msgs::ExceptionStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lxind_msgs::ExceptionStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace lxind_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'lxind_msgs': ['/home/zhangchunlei/lxind_ws/src/lxind_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::lxind_msgs::ExceptionStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lxind_msgs::ExceptionStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lxind_msgs::ExceptionStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lxind_msgs::ExceptionStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lxind_msgs::ExceptionStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lxind_msgs::ExceptionStatus_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lxind_msgs::ExceptionStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fbfdb4c2bece4216f1e5efbbd716245c";
  }

  static const char* value(const ::lxind_msgs::ExceptionStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfbfdb4c2bece4216ULL;
  static const uint64_t static_value2 = 0xf1e5efbbd716245cULL;
};

template<class ContainerAllocator>
struct DataType< ::lxind_msgs::ExceptionStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lxind_msgs/ExceptionStatus";
  }

  static const char* value(const ::lxind_msgs::ExceptionStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lxind_msgs::ExceptionStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
\n\
bool  isShow\n\
uint8  warnMode\n\
uint8  warnid\n\
string name\n\
string prompt\n\
\n\
string leftWarnText\n\
string middleWarnText\n\
string rightWarnText\n\
uint8  leftWarnId\n\
uint8  middleWarnId\n\
uint8  rightWarnId\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::lxind_msgs::ExceptionStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lxind_msgs::ExceptionStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.isShow);
      stream.next(m.warnMode);
      stream.next(m.warnid);
      stream.next(m.name);
      stream.next(m.prompt);
      stream.next(m.leftWarnText);
      stream.next(m.middleWarnText);
      stream.next(m.rightWarnText);
      stream.next(m.leftWarnId);
      stream.next(m.middleWarnId);
      stream.next(m.rightWarnId);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ExceptionStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lxind_msgs::ExceptionStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lxind_msgs::ExceptionStatus_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "isShow: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isShow);
    s << indent << "warnMode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.warnMode);
    s << indent << "warnid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.warnid);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "prompt: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.prompt);
    s << indent << "leftWarnText: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.leftWarnText);
    s << indent << "middleWarnText: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.middleWarnText);
    s << indent << "rightWarnText: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.rightWarnText);
    s << indent << "leftWarnId: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.leftWarnId);
    s << indent << "middleWarnId: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.middleWarnId);
    s << indent << "rightWarnId: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.rightWarnId);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LXIND_MSGS_MESSAGE_EXCEPTIONSTATUS_H
