# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from lxind_msgs/TaskStatus.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class TaskStatus(genpy.Message):
  _md5sum = "02ea03eb8d08763c2d5f59cf7ef73d88"
  _type = "lxind_msgs/TaskStatus"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 STATUS_UNFINISHED = 0
uint8 STATUS_SUCCEEDED = 1
uint8 STATUS_FAILED = 2
uint8 STATUS_PAUSED = 3

#  not accepted by diaodu
uint8 STATUS_STOPPED = 10    # task stopped, no need send to diaodu
uint8 STATUS_OFFLINE_PAUSED = 11
uint8 STATUS_SKIP = 12
uint8 STATUS_EXCEPT = 13

int64 task_id
uint32 pri_task_cmd
uint8 status
uint8 carry_state"""
  # Pseudo-constants
  STATUS_UNFINISHED = 0
  STATUS_SUCCEEDED = 1
  STATUS_FAILED = 2
  STATUS_PAUSED = 3
  STATUS_STOPPED = 10
  STATUS_OFFLINE_PAUSED = 11
  STATUS_SKIP = 12
  STATUS_EXCEPT = 13

  __slots__ = ['task_id','pri_task_cmd','status','carry_state']
  _slot_types = ['int64','uint32','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       task_id,pri_task_cmd,status,carry_state

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TaskStatus, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.task_id is None:
        self.task_id = 0
      if self.pri_task_cmd is None:
        self.pri_task_cmd = 0
      if self.status is None:
        self.status = 0
      if self.carry_state is None:
        self.carry_state = 0
    else:
      self.task_id = 0
      self.pri_task_cmd = 0
      self.status = 0
      self.carry_state = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_qI2B().pack(_x.task_id, _x.pri_task_cmd, _x.status, _x.carry_state))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 14
      (_x.task_id, _x.pri_task_cmd, _x.status, _x.carry_state,) = _get_struct_qI2B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_qI2B().pack(_x.task_id, _x.pri_task_cmd, _x.status, _x.carry_state))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 14
      (_x.task_id, _x.pri_task_cmd, _x.status, _x.carry_state,) = _get_struct_qI2B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_qI2B = None
def _get_struct_qI2B():
    global _struct_qI2B
    if _struct_qI2B is None:
        _struct_qI2B = struct.Struct("<qI2B")
    return _struct_qI2B
