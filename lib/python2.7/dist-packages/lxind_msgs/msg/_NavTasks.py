# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from lxind_msgs/NavTasks.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import lxind_msgs.msg
import std_msgs.msg

class NavTasks(genpy.Message):
  _md5sum = "ad67f297ef1a9306a061f82f2b2a7d23"
  _type = "lxind_msgs/NavTasks"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header

bool b_append
lxind_msgs/NavTask[] tasks
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: lxind_msgs/NavTask
int64 task_id
uint32 pri_task_cmd

lxind_msgs/RobotPose init_state
lxind_msgs/RobotPose target_state

int32 target_id
string target_name
float32 tol_dist
float32 tol_angle
uint8 to_goal_mode

bool enable_oa
float32 max_speed
float32 min_turn_radius

lxind_msgs/PathPoint[] fixed_path

# Robot spec task
uint8 load_mode
uint8 direction

# precloc
float32 prec_dist

string extra_info
================================================================================
MSG: lxind_msgs/RobotPose
float32 x
float32 y
float32 th
================================================================================
MSG: lxind_msgs/PathPoint
float32 x
float32 y
float32 th

string node_name"""
  __slots__ = ['header','b_append','tasks']
  _slot_types = ['std_msgs/Header','bool','lxind_msgs/NavTask[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,b_append,tasks

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(NavTasks, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.b_append is None:
        self.b_append = False
      if self.tasks is None:
        self.tasks = []
    else:
      self.header = std_msgs.msg.Header()
      self.b_append = False
      self.tasks = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_B().pack(self.b_append))
      length = len(self.tasks)
      buff.write(_struct_I.pack(length))
      for val1 in self.tasks:
        _x = val1
        buff.write(_get_struct_qI().pack(_x.task_id, _x.pri_task_cmd))
        _v1 = val1.init_state
        _x = _v1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.th))
        _v2 = val1.target_state
        _x = _v2
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.th))
        buff.write(_get_struct_i().pack(val1.target_id))
        _x = val1.target_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_get_struct_2f2B2f().pack(_x.tol_dist, _x.tol_angle, _x.to_goal_mode, _x.enable_oa, _x.max_speed, _x.min_turn_radius))
        length = len(val1.fixed_path)
        buff.write(_struct_I.pack(length))
        for val2 in val1.fixed_path:
          _x = val2
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.th))
          _x = val2.node_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_get_struct_2Bf().pack(_x.load_mode, _x.direction, _x.prec_dist))
        _x = val1.extra_info
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.tasks is None:
        self.tasks = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 1
      (self.b_append,) = _get_struct_B().unpack(str[start:end])
      self.b_append = bool(self.b_append)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.tasks = []
      for i in range(0, length):
        val1 = lxind_msgs.msg.NavTask()
        _x = val1
        start = end
        end += 12
        (_x.task_id, _x.pri_task_cmd,) = _get_struct_qI().unpack(str[start:end])
        _v3 = val1.init_state
        _x = _v3
        start = end
        end += 12
        (_x.x, _x.y, _x.th,) = _get_struct_3f().unpack(str[start:end])
        _v4 = val1.target_state
        _x = _v4
        start = end
        end += 12
        (_x.x, _x.y, _x.th,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 4
        (val1.target_id,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.target_name = str[start:end].decode('utf-8')
        else:
          val1.target_name = str[start:end]
        _x = val1
        start = end
        end += 18
        (_x.tol_dist, _x.tol_angle, _x.to_goal_mode, _x.enable_oa, _x.max_speed, _x.min_turn_radius,) = _get_struct_2f2B2f().unpack(str[start:end])
        val1.enable_oa = bool(val1.enable_oa)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.fixed_path = []
        for i in range(0, length):
          val2 = lxind_msgs.msg.PathPoint()
          _x = val2
          start = end
          end += 12
          (_x.x, _x.y, _x.th,) = _get_struct_3f().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.node_name = str[start:end].decode('utf-8')
          else:
            val2.node_name = str[start:end]
          val1.fixed_path.append(val2)
        _x = val1
        start = end
        end += 6
        (_x.load_mode, _x.direction, _x.prec_dist,) = _get_struct_2Bf().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.extra_info = str[start:end].decode('utf-8')
        else:
          val1.extra_info = str[start:end]
        self.tasks.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_B().pack(self.b_append))
      length = len(self.tasks)
      buff.write(_struct_I.pack(length))
      for val1 in self.tasks:
        _x = val1
        buff.write(_get_struct_qI().pack(_x.task_id, _x.pri_task_cmd))
        _v5 = val1.init_state
        _x = _v5
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.th))
        _v6 = val1.target_state
        _x = _v6
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.th))
        buff.write(_get_struct_i().pack(val1.target_id))
        _x = val1.target_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_get_struct_2f2B2f().pack(_x.tol_dist, _x.tol_angle, _x.to_goal_mode, _x.enable_oa, _x.max_speed, _x.min_turn_radius))
        length = len(val1.fixed_path)
        buff.write(_struct_I.pack(length))
        for val2 in val1.fixed_path:
          _x = val2
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.th))
          _x = val2.node_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_get_struct_2Bf().pack(_x.load_mode, _x.direction, _x.prec_dist))
        _x = val1.extra_info
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.tasks is None:
        self.tasks = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 1
      (self.b_append,) = _get_struct_B().unpack(str[start:end])
      self.b_append = bool(self.b_append)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.tasks = []
      for i in range(0, length):
        val1 = lxind_msgs.msg.NavTask()
        _x = val1
        start = end
        end += 12
        (_x.task_id, _x.pri_task_cmd,) = _get_struct_qI().unpack(str[start:end])
        _v7 = val1.init_state
        _x = _v7
        start = end
        end += 12
        (_x.x, _x.y, _x.th,) = _get_struct_3f().unpack(str[start:end])
        _v8 = val1.target_state
        _x = _v8
        start = end
        end += 12
        (_x.x, _x.y, _x.th,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 4
        (val1.target_id,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.target_name = str[start:end].decode('utf-8')
        else:
          val1.target_name = str[start:end]
        _x = val1
        start = end
        end += 18
        (_x.tol_dist, _x.tol_angle, _x.to_goal_mode, _x.enable_oa, _x.max_speed, _x.min_turn_radius,) = _get_struct_2f2B2f().unpack(str[start:end])
        val1.enable_oa = bool(val1.enable_oa)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.fixed_path = []
        for i in range(0, length):
          val2 = lxind_msgs.msg.PathPoint()
          _x = val2
          start = end
          end += 12
          (_x.x, _x.y, _x.th,) = _get_struct_3f().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.node_name = str[start:end].decode('utf-8')
          else:
            val2.node_name = str[start:end]
          val1.fixed_path.append(val2)
        _x = val1
        start = end
        end += 6
        (_x.load_mode, _x.direction, _x.prec_dist,) = _get_struct_2Bf().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.extra_info = str[start:end].decode('utf-8')
        else:
          val1.extra_info = str[start:end]
        self.tasks.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_qI = None
def _get_struct_qI():
    global _struct_qI
    if _struct_qI is None:
        _struct_qI = struct.Struct("<qI")
    return _struct_qI
_struct_2Bf = None
def _get_struct_2Bf():
    global _struct_2Bf
    if _struct_2Bf is None:
        _struct_2Bf = struct.Struct("<2Bf")
    return _struct_2Bf
_struct_2f2B2f = None
def _get_struct_2f2B2f():
    global _struct_2f2B2f
    if _struct_2f2B2f is None:
        _struct_2f2B2f = struct.Struct("<2f2B2f")
    return _struct_2f2B2f
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
