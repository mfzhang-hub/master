# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from lxind_msgs/NavTask.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import lxind_msgs.msg

class NavTask(genpy.Message):
  _md5sum = "359a8a1089fad86835e44a3e3f00b84d"
  _type = "lxind_msgs/NavTask"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int64 task_id
uint32 pri_task_cmd

lxind_msgs/RobotPose init_state
lxind_msgs/RobotPose target_state

int32 target_id
string target_name
float32 tol_dist
float32 tol_angle
uint8 to_goal_mode

bool enable_oa
float32 max_speed
float32 min_turn_radius

lxind_msgs/PathPoint[] fixed_path

# Robot spec task
uint8 load_mode
uint8 direction

# precloc
float32 prec_dist

string extra_info
================================================================================
MSG: lxind_msgs/RobotPose
float32 x
float32 y
float32 th
================================================================================
MSG: lxind_msgs/PathPoint
float32 x
float32 y
float32 th

string node_name"""
  __slots__ = ['task_id','pri_task_cmd','init_state','target_state','target_id','target_name','tol_dist','tol_angle','to_goal_mode','enable_oa','max_speed','min_turn_radius','fixed_path','load_mode','direction','prec_dist','extra_info']
  _slot_types = ['int64','uint32','lxind_msgs/RobotPose','lxind_msgs/RobotPose','int32','string','float32','float32','uint8','bool','float32','float32','lxind_msgs/PathPoint[]','uint8','uint8','float32','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       task_id,pri_task_cmd,init_state,target_state,target_id,target_name,tol_dist,tol_angle,to_goal_mode,enable_oa,max_speed,min_turn_radius,fixed_path,load_mode,direction,prec_dist,extra_info

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(NavTask, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.task_id is None:
        self.task_id = 0
      if self.pri_task_cmd is None:
        self.pri_task_cmd = 0
      if self.init_state is None:
        self.init_state = lxind_msgs.msg.RobotPose()
      if self.target_state is None:
        self.target_state = lxind_msgs.msg.RobotPose()
      if self.target_id is None:
        self.target_id = 0
      if self.target_name is None:
        self.target_name = ''
      if self.tol_dist is None:
        self.tol_dist = 0.
      if self.tol_angle is None:
        self.tol_angle = 0.
      if self.to_goal_mode is None:
        self.to_goal_mode = 0
      if self.enable_oa is None:
        self.enable_oa = False
      if self.max_speed is None:
        self.max_speed = 0.
      if self.min_turn_radius is None:
        self.min_turn_radius = 0.
      if self.fixed_path is None:
        self.fixed_path = []
      if self.load_mode is None:
        self.load_mode = 0
      if self.direction is None:
        self.direction = 0
      if self.prec_dist is None:
        self.prec_dist = 0.
      if self.extra_info is None:
        self.extra_info = ''
    else:
      self.task_id = 0
      self.pri_task_cmd = 0
      self.init_state = lxind_msgs.msg.RobotPose()
      self.target_state = lxind_msgs.msg.RobotPose()
      self.target_id = 0
      self.target_name = ''
      self.tol_dist = 0.
      self.tol_angle = 0.
      self.to_goal_mode = 0
      self.enable_oa = False
      self.max_speed = 0.
      self.min_turn_radius = 0.
      self.fixed_path = []
      self.load_mode = 0
      self.direction = 0
      self.prec_dist = 0.
      self.extra_info = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_qI6fi().pack(_x.task_id, _x.pri_task_cmd, _x.init_state.x, _x.init_state.y, _x.init_state.th, _x.target_state.x, _x.target_state.y, _x.target_state.th, _x.target_id))
      _x = self.target_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2f2B2f().pack(_x.tol_dist, _x.tol_angle, _x.to_goal_mode, _x.enable_oa, _x.max_speed, _x.min_turn_radius))
      length = len(self.fixed_path)
      buff.write(_struct_I.pack(length))
      for val1 in self.fixed_path:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.th))
        _x = val1.node_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2Bf().pack(_x.load_mode, _x.direction, _x.prec_dist))
      _x = self.extra_info
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.init_state is None:
        self.init_state = lxind_msgs.msg.RobotPose()
      if self.target_state is None:
        self.target_state = lxind_msgs.msg.RobotPose()
      if self.fixed_path is None:
        self.fixed_path = None
      end = 0
      _x = self
      start = end
      end += 40
      (_x.task_id, _x.pri_task_cmd, _x.init_state.x, _x.init_state.y, _x.init_state.th, _x.target_state.x, _x.target_state.y, _x.target_state.th, _x.target_id,) = _get_struct_qI6fi().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.target_name = str[start:end].decode('utf-8')
      else:
        self.target_name = str[start:end]
      _x = self
      start = end
      end += 18
      (_x.tol_dist, _x.tol_angle, _x.to_goal_mode, _x.enable_oa, _x.max_speed, _x.min_turn_radius,) = _get_struct_2f2B2f().unpack(str[start:end])
      self.enable_oa = bool(self.enable_oa)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fixed_path = []
      for i in range(0, length):
        val1 = lxind_msgs.msg.PathPoint()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.th,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.node_name = str[start:end].decode('utf-8')
        else:
          val1.node_name = str[start:end]
        self.fixed_path.append(val1)
      _x = self
      start = end
      end += 6
      (_x.load_mode, _x.direction, _x.prec_dist,) = _get_struct_2Bf().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.extra_info = str[start:end].decode('utf-8')
      else:
        self.extra_info = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_qI6fi().pack(_x.task_id, _x.pri_task_cmd, _x.init_state.x, _x.init_state.y, _x.init_state.th, _x.target_state.x, _x.target_state.y, _x.target_state.th, _x.target_id))
      _x = self.target_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2f2B2f().pack(_x.tol_dist, _x.tol_angle, _x.to_goal_mode, _x.enable_oa, _x.max_speed, _x.min_turn_radius))
      length = len(self.fixed_path)
      buff.write(_struct_I.pack(length))
      for val1 in self.fixed_path:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.th))
        _x = val1.node_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2Bf().pack(_x.load_mode, _x.direction, _x.prec_dist))
      _x = self.extra_info
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.init_state is None:
        self.init_state = lxind_msgs.msg.RobotPose()
      if self.target_state is None:
        self.target_state = lxind_msgs.msg.RobotPose()
      if self.fixed_path is None:
        self.fixed_path = None
      end = 0
      _x = self
      start = end
      end += 40
      (_x.task_id, _x.pri_task_cmd, _x.init_state.x, _x.init_state.y, _x.init_state.th, _x.target_state.x, _x.target_state.y, _x.target_state.th, _x.target_id,) = _get_struct_qI6fi().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.target_name = str[start:end].decode('utf-8')
      else:
        self.target_name = str[start:end]
      _x = self
      start = end
      end += 18
      (_x.tol_dist, _x.tol_angle, _x.to_goal_mode, _x.enable_oa, _x.max_speed, _x.min_turn_radius,) = _get_struct_2f2B2f().unpack(str[start:end])
      self.enable_oa = bool(self.enable_oa)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fixed_path = []
      for i in range(0, length):
        val1 = lxind_msgs.msg.PathPoint()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.th,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.node_name = str[start:end].decode('utf-8')
        else:
          val1.node_name = str[start:end]
        self.fixed_path.append(val1)
      _x = self
      start = end
      end += 6
      (_x.load_mode, _x.direction, _x.prec_dist,) = _get_struct_2Bf().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.extra_info = str[start:end].decode('utf-8')
      else:
        self.extra_info = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2Bf = None
def _get_struct_2Bf():
    global _struct_2Bf
    if _struct_2Bf is None:
        _struct_2Bf = struct.Struct("<2Bf")
    return _struct_2Bf
_struct_2f2B2f = None
def _get_struct_2f2B2f():
    global _struct_2f2B2f
    if _struct_2f2B2f is None:
        _struct_2f2B2f = struct.Struct("<2f2B2f")
    return _struct_2f2B2f
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_qI6fi = None
def _get_struct_qI6fi():
    global _struct_qI6fi
    if _struct_qI6fi is None:
        _struct_qI6fi = struct.Struct("<qI6fi")
    return _struct_qI6fi
