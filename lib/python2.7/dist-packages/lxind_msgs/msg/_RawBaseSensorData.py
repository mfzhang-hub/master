# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from lxind_msgs/RawBaseSensorData.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class RawBaseSensorData(genpy.Message):
  _md5sum = "3a215546cf8369a7c4083a9a14c8c42a"
  _type = "lxind_msgs/RawBaseSensorData"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# raw values reported from base controller
Header header

int32 left_encoder
int32 right_encoder
float32 yaw
bool is_bumped
bool emerg_pressed

bool switch1_on
bool switch2_on
bool switch3_on
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  __slots__ = ['header','left_encoder','right_encoder','yaw','is_bumped','emerg_pressed','switch1_on','switch2_on','switch3_on']
  _slot_types = ['std_msgs/Header','int32','int32','float32','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,left_encoder,right_encoder,yaw,is_bumped,emerg_pressed,switch1_on,switch2_on,switch3_on

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RawBaseSensorData, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.left_encoder is None:
        self.left_encoder = 0
      if self.right_encoder is None:
        self.right_encoder = 0
      if self.yaw is None:
        self.yaw = 0.
      if self.is_bumped is None:
        self.is_bumped = False
      if self.emerg_pressed is None:
        self.emerg_pressed = False
      if self.switch1_on is None:
        self.switch1_on = False
      if self.switch2_on is None:
        self.switch2_on = False
      if self.switch3_on is None:
        self.switch3_on = False
    else:
      self.header = std_msgs.msg.Header()
      self.left_encoder = 0
      self.right_encoder = 0
      self.yaw = 0.
      self.is_bumped = False
      self.emerg_pressed = False
      self.switch1_on = False
      self.switch2_on = False
      self.switch3_on = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2if5B().pack(_x.left_encoder, _x.right_encoder, _x.yaw, _x.is_bumped, _x.emerg_pressed, _x.switch1_on, _x.switch2_on, _x.switch3_on))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 17
      (_x.left_encoder, _x.right_encoder, _x.yaw, _x.is_bumped, _x.emerg_pressed, _x.switch1_on, _x.switch2_on, _x.switch3_on,) = _get_struct_2if5B().unpack(str[start:end])
      self.is_bumped = bool(self.is_bumped)
      self.emerg_pressed = bool(self.emerg_pressed)
      self.switch1_on = bool(self.switch1_on)
      self.switch2_on = bool(self.switch2_on)
      self.switch3_on = bool(self.switch3_on)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2if5B().pack(_x.left_encoder, _x.right_encoder, _x.yaw, _x.is_bumped, _x.emerg_pressed, _x.switch1_on, _x.switch2_on, _x.switch3_on))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 17
      (_x.left_encoder, _x.right_encoder, _x.yaw, _x.is_bumped, _x.emerg_pressed, _x.switch1_on, _x.switch2_on, _x.switch3_on,) = _get_struct_2if5B().unpack(str[start:end])
      self.is_bumped = bool(self.is_bumped)
      self.emerg_pressed = bool(self.emerg_pressed)
      self.switch1_on = bool(self.switch1_on)
      self.switch2_on = bool(self.switch2_on)
      self.switch3_on = bool(self.switch3_on)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_2if5B = None
def _get_struct_2if5B():
    global _struct_2if5B
    if _struct_2if5B is None:
        _struct_2if5B = struct.Struct("<2if5B")
    return _struct_2if5B
