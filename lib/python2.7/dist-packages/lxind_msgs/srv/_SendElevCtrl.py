# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from lxind_msgs/SendElevCtrlRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SendElevCtrlRequest(genpy.Message):
  _md5sum = "0ab03056028347a920920a81662603df"
  _type = "lxind_msgs/SendElevCtrlRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 ELEV_NOACTION = 0
uint8 ELEV_UP = 1
uint8 ELEV_DOWN = 2
uint8 ELEV_STOP = 3
uint8 ELEV_CLEAR = 4
uint8 ELEV_RESET = 5

uint8 RED_LIGHT   = 7
uint8 GREEN_LIGHT = 8
uint8 BLUE_LIGHT  = 9
uint8 PURPLE_LIGHT = 10
uint8 TWINKLE = 12

uint8 INSPECT_AUTO_TEST   = 20
uint8 INSPECT_GUARD_RISE  = 21
uint8 INSPECT_GUARD_DOWN  = 22
uint8 INSPECT_ROLLER_ROLL_LEFT = 23
uint8 INSPECT_ROLLER_ROLL_RIGHT = 24
uint8 INSPECT_ROLLER_ROLL_STOP = 25
uint8 INSPECT_ROLLER_LOAD = 26
uint8 INSPECT_ROLLER_UNLOAD = 27

uint8 cmd
"""
  # Pseudo-constants
  ELEV_NOACTION = 0
  ELEV_UP = 1
  ELEV_DOWN = 2
  ELEV_STOP = 3
  ELEV_CLEAR = 4
  ELEV_RESET = 5
  RED_LIGHT = 7
  GREEN_LIGHT = 8
  BLUE_LIGHT = 9
  PURPLE_LIGHT = 10
  TWINKLE = 12
  INSPECT_AUTO_TEST = 20
  INSPECT_GUARD_RISE = 21
  INSPECT_GUARD_DOWN = 22
  INSPECT_ROLLER_ROLL_LEFT = 23
  INSPECT_ROLLER_ROLL_RIGHT = 24
  INSPECT_ROLLER_ROLL_STOP = 25
  INSPECT_ROLLER_LOAD = 26
  INSPECT_ROLLER_UNLOAD = 27

  __slots__ = ['cmd']
  _slot_types = ['uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       cmd

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SendElevCtrlRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.cmd is None:
        self.cmd = 0
    else:
      self.cmd = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_B().pack(self.cmd))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 1
      (self.cmd,) = _get_struct_B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_get_struct_B().pack(self.cmd))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.cmd,) = _get_struct_B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from lxind_msgs/SendElevCtrlResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SendElevCtrlResponse(genpy.Message):
  _md5sum = "fccccc533ea484677a8d17d860146522"
  _type = "lxind_msgs/SendElevCtrlResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string ret_msg
"""
  __slots__ = ['ret_msg']
  _slot_types = ['string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ret_msg

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SendElevCtrlResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.ret_msg is None:
        self.ret_msg = ''
    else:
      self.ret_msg = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.ret_msg
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ret_msg = str[start:end].decode('utf-8')
      else:
        self.ret_msg = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.ret_msg
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ret_msg = str[start:end].decode('utf-8')
      else:
        self.ret_msg = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
class SendElevCtrl(object):
  _type          = 'lxind_msgs/SendElevCtrl'
  _md5sum = 'e75bf683cb9ed53ea2353ae16a7e075f'
  _request_class  = SendElevCtrlRequest
  _response_class = SendElevCtrlResponse
