// Generated by gencpp from file lxind_msgs/MapMetaData.msg
// DO NOT EDIT!


#ifndef LXIND_MSGS_MESSAGE_MAPMETADATA_H
#define LXIND_MSGS_MESSAGE_MAPMETADATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Pose2D.h>

namespace lxind_msgs
{
template <class ContainerAllocator>
struct MapMetaData_
{
  typedef MapMetaData_<ContainerAllocator> Type;

  MapMetaData_()
    : map_name()
    , map_path_prefix()
    , width(0)
    , height(0)
    , origin()
    , resolution(0.0)
    , is_switched_map(false)
    , initial_pose()  {
    }
  MapMetaData_(const ContainerAllocator& _alloc)
    : map_name(_alloc)
    , map_path_prefix(_alloc)
    , width(0)
    , height(0)
    , origin(_alloc)
    , resolution(0.0)
    , is_switched_map(false)
    , initial_pose(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _map_name_type;
  _map_name_type map_name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _map_path_prefix_type;
  _map_path_prefix_type map_path_prefix;

   typedef uint32_t _width_type;
  _width_type width;

   typedef uint32_t _height_type;
  _height_type height;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _origin_type;
  _origin_type origin;

   typedef float _resolution_type;
  _resolution_type resolution;

   typedef uint8_t _is_switched_map_type;
  _is_switched_map_type is_switched_map;

   typedef  ::geometry_msgs::Pose2D_<ContainerAllocator>  _initial_pose_type;
  _initial_pose_type initial_pose;





  typedef boost::shared_ptr< ::lxind_msgs::MapMetaData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lxind_msgs::MapMetaData_<ContainerAllocator> const> ConstPtr;

}; // struct MapMetaData_

typedef ::lxind_msgs::MapMetaData_<std::allocator<void> > MapMetaData;

typedef boost::shared_ptr< ::lxind_msgs::MapMetaData > MapMetaDataPtr;
typedef boost::shared_ptr< ::lxind_msgs::MapMetaData const> MapMetaDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lxind_msgs::MapMetaData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lxind_msgs::MapMetaData_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace lxind_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'lxind_msgs': ['/home/zhangchunlei/lxind_ws/src/lxind_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::lxind_msgs::MapMetaData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lxind_msgs::MapMetaData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lxind_msgs::MapMetaData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lxind_msgs::MapMetaData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lxind_msgs::MapMetaData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lxind_msgs::MapMetaData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lxind_msgs::MapMetaData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6bf1e47e51e46074d8693b0726c02fb3";
  }

  static const char* value(const ::lxind_msgs::MapMetaData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6bf1e47e51e46074ULL;
  static const uint64_t static_value2 = 0xd8693b0726c02fb3ULL;
};

template<class ContainerAllocator>
struct DataType< ::lxind_msgs::MapMetaData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lxind_msgs/MapMetaData";
  }

  static const char* value(const ::lxind_msgs::MapMetaData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lxind_msgs::MapMetaData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# map name\n\
string map_name             # map name, ex.outmzpick\n\
string map_path_prefix      # path without suffix, ex: /home/fr1511b/lxind_ws/install/share/lxind_nav/maps/\n\
\n\
# Map width [cells]\n\
uint32 width\n\
# Map height [cells]\n\
uint32 height\n\
\n\
# The origin of the map [m, m, rad].  This is the real-world pose of the\n\
# cell (0,0) in the map.\n\
geometry_msgs/Pose origin\n\
float32 resolution\n\
\n\
\n\
####################################################\n\
bool is_switched_map             # 是否是切换地图 \n\
geometry_msgs/Pose2D initial_pose  # 切换地图后的初始点\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of position and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose2D\n\
# This expresses a position and orientation on a 2D manifold.\n\
\n\
float64 x\n\
float64 y\n\
float64 theta\n\
";
  }

  static const char* value(const ::lxind_msgs::MapMetaData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lxind_msgs::MapMetaData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.map_name);
      stream.next(m.map_path_prefix);
      stream.next(m.width);
      stream.next(m.height);
      stream.next(m.origin);
      stream.next(m.resolution);
      stream.next(m.is_switched_map);
      stream.next(m.initial_pose);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MapMetaData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lxind_msgs::MapMetaData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lxind_msgs::MapMetaData_<ContainerAllocator>& v)
  {
    s << indent << "map_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.map_name);
    s << indent << "map_path_prefix: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.map_path_prefix);
    s << indent << "width: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.width);
    s << indent << "height: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.height);
    s << indent << "origin: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.origin);
    s << indent << "resolution: ";
    Printer<float>::stream(s, indent + "  ", v.resolution);
    s << indent << "is_switched_map: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_switched_map);
    s << indent << "initial_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose2D_<ContainerAllocator> >::stream(s, indent + "  ", v.initial_pose);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LXIND_MSGS_MESSAGE_MAPMETADATA_H
