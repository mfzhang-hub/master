// Generated by gencpp from file lxind_msgs/NavStatus.msg
// DO NOT EDIT!


#ifndef LXIND_MSGS_MESSAGE_NAVSTATUS_H
#define LXIND_MSGS_MESSAGE_NAVSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Pose2D.h>

namespace lxind_msgs
{
template <class ContainerAllocator>
struct NavStatus_
{
  typedef NavStatus_<ContainerAllocator> Type;

  NavStatus_()
    : header()
    , latest_task_id(0)
    , curr_posi()
    , pre_point(0)
    , next_point(0)
    , is_exist_task(0)
    , robot_state(0)
    , reach_state(0)
    , carry_state(0)
    , cur_route_id(0)
    , cargo_count(0)
    , exception(0)  {
    }
  NavStatus_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , latest_task_id(0)
    , curr_posi(_alloc)
    , pre_point(0)
    , next_point(0)
    , is_exist_task(0)
    , robot_state(0)
    , reach_state(0)
    , carry_state(0)
    , cur_route_id(0)
    , cargo_count(0)
    , exception(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int64_t _latest_task_id_type;
  _latest_task_id_type latest_task_id;

   typedef  ::geometry_msgs::Pose2D_<ContainerAllocator>  _curr_posi_type;
  _curr_posi_type curr_posi;

   typedef int32_t _pre_point_type;
  _pre_point_type pre_point;

   typedef int32_t _next_point_type;
  _next_point_type next_point;

   typedef int32_t _is_exist_task_type;
  _is_exist_task_type is_exist_task;

   typedef int8_t _robot_state_type;
  _robot_state_type robot_state;

   typedef int8_t _reach_state_type;
  _reach_state_type reach_state;

   typedef int32_t _carry_state_type;
  _carry_state_type carry_state;

   typedef int32_t _cur_route_id_type;
  _cur_route_id_type cur_route_id;

   typedef int32_t _cargo_count_type;
  _cargo_count_type cargo_count;

   typedef int32_t _exception_type;
  _exception_type exception;



  enum {
    GOAL_NOT_REACHED = 0,
    GOAL_REACHED = 1,
    GOAL_APPROACHING = 2,
  };


  typedef boost::shared_ptr< ::lxind_msgs::NavStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lxind_msgs::NavStatus_<ContainerAllocator> const> ConstPtr;

}; // struct NavStatus_

typedef ::lxind_msgs::NavStatus_<std::allocator<void> > NavStatus;

typedef boost::shared_ptr< ::lxind_msgs::NavStatus > NavStatusPtr;
typedef boost::shared_ptr< ::lxind_msgs::NavStatus const> NavStatusConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lxind_msgs::NavStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lxind_msgs::NavStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace lxind_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'lxind_msgs': ['/home/zhangchunlei/lxind_ws/src/lxind_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::lxind_msgs::NavStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lxind_msgs::NavStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lxind_msgs::NavStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lxind_msgs::NavStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lxind_msgs::NavStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lxind_msgs::NavStatus_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lxind_msgs::NavStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e8af1e2b711c74b6795ee845872930b7";
  }

  static const char* value(const ::lxind_msgs::NavStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe8af1e2b711c74b6ULL;
  static const uint64_t static_value2 = 0x795ee845872930b7ULL;
};

template<class ContainerAllocator>
struct DataType< ::lxind_msgs::NavStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lxind_msgs/NavStatus";
  }

  static const char* value(const ::lxind_msgs::NavStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lxind_msgs::NavStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 GOAL_NOT_REACHED=0\n\
int8 GOAL_REACHED=1\n\
int8 GOAL_APPROACHING=2\n\
\n\
Header header\n\
\n\
int64 latest_task_id\n\
\n\
geometry_msgs/Pose2D curr_posi\n\
\n\
int32 pre_point\n\
int32 next_point\n\
\n\
int32 is_exist_task\n\
\n\
int8 robot_state\n\
int8 reach_state\n\
\n\
int32 carry_state\n\
int32 cur_route_id\n\
int32 cargo_count\n\
\n\
int32 exception\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose2D\n\
# This expresses a position and orientation on a 2D manifold.\n\
\n\
float64 x\n\
float64 y\n\
float64 theta\n\
";
  }

  static const char* value(const ::lxind_msgs::NavStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lxind_msgs::NavStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.latest_task_id);
      stream.next(m.curr_posi);
      stream.next(m.pre_point);
      stream.next(m.next_point);
      stream.next(m.is_exist_task);
      stream.next(m.robot_state);
      stream.next(m.reach_state);
      stream.next(m.carry_state);
      stream.next(m.cur_route_id);
      stream.next(m.cargo_count);
      stream.next(m.exception);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NavStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lxind_msgs::NavStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lxind_msgs::NavStatus_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "latest_task_id: ";
    Printer<int64_t>::stream(s, indent + "  ", v.latest_task_id);
    s << indent << "curr_posi: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose2D_<ContainerAllocator> >::stream(s, indent + "  ", v.curr_posi);
    s << indent << "pre_point: ";
    Printer<int32_t>::stream(s, indent + "  ", v.pre_point);
    s << indent << "next_point: ";
    Printer<int32_t>::stream(s, indent + "  ", v.next_point);
    s << indent << "is_exist_task: ";
    Printer<int32_t>::stream(s, indent + "  ", v.is_exist_task);
    s << indent << "robot_state: ";
    Printer<int8_t>::stream(s, indent + "  ", v.robot_state);
    s << indent << "reach_state: ";
    Printer<int8_t>::stream(s, indent + "  ", v.reach_state);
    s << indent << "carry_state: ";
    Printer<int32_t>::stream(s, indent + "  ", v.carry_state);
    s << indent << "cur_route_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.cur_route_id);
    s << indent << "cargo_count: ";
    Printer<int32_t>::stream(s, indent + "  ", v.cargo_count);
    s << indent << "exception: ";
    Printer<int32_t>::stream(s, indent + "  ", v.exception);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LXIND_MSGS_MESSAGE_NAVSTATUS_H
