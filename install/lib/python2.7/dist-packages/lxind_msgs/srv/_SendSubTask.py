# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from lxind_msgs/SendSubTaskRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import lxind_msgs.msg

class SendSubTaskRequest(genpy.Message):
  _md5sum = "87a80a4312f0eac316519b6aeb574e48"
  _type = "lxind_msgs/SendSubTaskRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 task_id
uint32 sub_task_cmd

int32 next_pritask_cmd

lxind_msgs/RobotPose target_state
int32 target_id
string target_name
float32 tol_dist
float32 tol_angle
uint8 to_goal_mode

bool enable_oa
float32 max_speed
float32 safe_dist
float32 min_turn_radius
uint8 shape_transform

lxind_msgs/RobotPose init_state
lxind_msgs/PathPoint[] fixed_path


uint8 load_mode
uint8 direction

uint8 align_part
uint8 align_dir


float32 prec_dist


string roll_part

string extra_info

================================================================================
MSG: lxind_msgs/RobotPose
float32 x
float32 y
float32 th
================================================================================
MSG: lxind_msgs/PathPoint
float32 x
float32 y
float32 th

string node_name"""
  __slots__ = ['task_id','sub_task_cmd','next_pritask_cmd','target_state','target_id','target_name','tol_dist','tol_angle','to_goal_mode','enable_oa','max_speed','safe_dist','min_turn_radius','shape_transform','init_state','fixed_path','load_mode','direction','align_part','align_dir','prec_dist','roll_part','extra_info']
  _slot_types = ['int32','uint32','int32','lxind_msgs/RobotPose','int32','string','float32','float32','uint8','bool','float32','float32','float32','uint8','lxind_msgs/RobotPose','lxind_msgs/PathPoint[]','uint8','uint8','uint8','uint8','float32','string','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       task_id,sub_task_cmd,next_pritask_cmd,target_state,target_id,target_name,tol_dist,tol_angle,to_goal_mode,enable_oa,max_speed,safe_dist,min_turn_radius,shape_transform,init_state,fixed_path,load_mode,direction,align_part,align_dir,prec_dist,roll_part,extra_info

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SendSubTaskRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.task_id is None:
        self.task_id = 0
      if self.sub_task_cmd is None:
        self.sub_task_cmd = 0
      if self.next_pritask_cmd is None:
        self.next_pritask_cmd = 0
      if self.target_state is None:
        self.target_state = lxind_msgs.msg.RobotPose()
      if self.target_id is None:
        self.target_id = 0
      if self.target_name is None:
        self.target_name = ''
      if self.tol_dist is None:
        self.tol_dist = 0.
      if self.tol_angle is None:
        self.tol_angle = 0.
      if self.to_goal_mode is None:
        self.to_goal_mode = 0
      if self.enable_oa is None:
        self.enable_oa = False
      if self.max_speed is None:
        self.max_speed = 0.
      if self.safe_dist is None:
        self.safe_dist = 0.
      if self.min_turn_radius is None:
        self.min_turn_radius = 0.
      if self.shape_transform is None:
        self.shape_transform = 0
      if self.init_state is None:
        self.init_state = lxind_msgs.msg.RobotPose()
      if self.fixed_path is None:
        self.fixed_path = []
      if self.load_mode is None:
        self.load_mode = 0
      if self.direction is None:
        self.direction = 0
      if self.align_part is None:
        self.align_part = 0
      if self.align_dir is None:
        self.align_dir = 0
      if self.prec_dist is None:
        self.prec_dist = 0.
      if self.roll_part is None:
        self.roll_part = ''
      if self.extra_info is None:
        self.extra_info = ''
    else:
      self.task_id = 0
      self.sub_task_cmd = 0
      self.next_pritask_cmd = 0
      self.target_state = lxind_msgs.msg.RobotPose()
      self.target_id = 0
      self.target_name = ''
      self.tol_dist = 0.
      self.tol_angle = 0.
      self.to_goal_mode = 0
      self.enable_oa = False
      self.max_speed = 0.
      self.safe_dist = 0.
      self.min_turn_radius = 0.
      self.shape_transform = 0
      self.init_state = lxind_msgs.msg.RobotPose()
      self.fixed_path = []
      self.load_mode = 0
      self.direction = 0
      self.align_part = 0
      self.align_dir = 0
      self.prec_dist = 0.
      self.roll_part = ''
      self.extra_info = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_iIi3fi().pack(_x.task_id, _x.sub_task_cmd, _x.next_pritask_cmd, _x.target_state.x, _x.target_state.y, _x.target_state.th, _x.target_id))
      _x = self.target_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2f2B3fB3f().pack(_x.tol_dist, _x.tol_angle, _x.to_goal_mode, _x.enable_oa, _x.max_speed, _x.safe_dist, _x.min_turn_radius, _x.shape_transform, _x.init_state.x, _x.init_state.y, _x.init_state.th))
      length = len(self.fixed_path)
      buff.write(_struct_I.pack(length))
      for val1 in self.fixed_path:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.th))
        _x = val1.node_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_4Bf().pack(_x.load_mode, _x.direction, _x.align_part, _x.align_dir, _x.prec_dist))
      _x = self.roll_part
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.extra_info
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.target_state is None:
        self.target_state = lxind_msgs.msg.RobotPose()
      if self.init_state is None:
        self.init_state = lxind_msgs.msg.RobotPose()
      if self.fixed_path is None:
        self.fixed_path = None
      end = 0
      _x = self
      start = end
      end += 28
      (_x.task_id, _x.sub_task_cmd, _x.next_pritask_cmd, _x.target_state.x, _x.target_state.y, _x.target_state.th, _x.target_id,) = _get_struct_iIi3fi().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.target_name = str[start:end].decode('utf-8')
      else:
        self.target_name = str[start:end]
      _x = self
      start = end
      end += 35
      (_x.tol_dist, _x.tol_angle, _x.to_goal_mode, _x.enable_oa, _x.max_speed, _x.safe_dist, _x.min_turn_radius, _x.shape_transform, _x.init_state.x, _x.init_state.y, _x.init_state.th,) = _get_struct_2f2B3fB3f().unpack(str[start:end])
      self.enable_oa = bool(self.enable_oa)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fixed_path = []
      for i in range(0, length):
        val1 = lxind_msgs.msg.PathPoint()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.th,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.node_name = str[start:end].decode('utf-8')
        else:
          val1.node_name = str[start:end]
        self.fixed_path.append(val1)
      _x = self
      start = end
      end += 8
      (_x.load_mode, _x.direction, _x.align_part, _x.align_dir, _x.prec_dist,) = _get_struct_4Bf().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.roll_part = str[start:end].decode('utf-8')
      else:
        self.roll_part = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.extra_info = str[start:end].decode('utf-8')
      else:
        self.extra_info = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_iIi3fi().pack(_x.task_id, _x.sub_task_cmd, _x.next_pritask_cmd, _x.target_state.x, _x.target_state.y, _x.target_state.th, _x.target_id))
      _x = self.target_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2f2B3fB3f().pack(_x.tol_dist, _x.tol_angle, _x.to_goal_mode, _x.enable_oa, _x.max_speed, _x.safe_dist, _x.min_turn_radius, _x.shape_transform, _x.init_state.x, _x.init_state.y, _x.init_state.th))
      length = len(self.fixed_path)
      buff.write(_struct_I.pack(length))
      for val1 in self.fixed_path:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.th))
        _x = val1.node_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_4Bf().pack(_x.load_mode, _x.direction, _x.align_part, _x.align_dir, _x.prec_dist))
      _x = self.roll_part
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.extra_info
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.target_state is None:
        self.target_state = lxind_msgs.msg.RobotPose()
      if self.init_state is None:
        self.init_state = lxind_msgs.msg.RobotPose()
      if self.fixed_path is None:
        self.fixed_path = None
      end = 0
      _x = self
      start = end
      end += 28
      (_x.task_id, _x.sub_task_cmd, _x.next_pritask_cmd, _x.target_state.x, _x.target_state.y, _x.target_state.th, _x.target_id,) = _get_struct_iIi3fi().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.target_name = str[start:end].decode('utf-8')
      else:
        self.target_name = str[start:end]
      _x = self
      start = end
      end += 35
      (_x.tol_dist, _x.tol_angle, _x.to_goal_mode, _x.enable_oa, _x.max_speed, _x.safe_dist, _x.min_turn_radius, _x.shape_transform, _x.init_state.x, _x.init_state.y, _x.init_state.th,) = _get_struct_2f2B3fB3f().unpack(str[start:end])
      self.enable_oa = bool(self.enable_oa)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fixed_path = []
      for i in range(0, length):
        val1 = lxind_msgs.msg.PathPoint()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.th,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.node_name = str[start:end].decode('utf-8')
        else:
          val1.node_name = str[start:end]
        self.fixed_path.append(val1)
      _x = self
      start = end
      end += 8
      (_x.load_mode, _x.direction, _x.align_part, _x.align_dir, _x.prec_dist,) = _get_struct_4Bf().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.roll_part = str[start:end].decode('utf-8')
      else:
        self.roll_part = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.extra_info = str[start:end].decode('utf-8')
      else:
        self.extra_info = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2f2B3fB3f = None
def _get_struct_2f2B3fB3f():
    global _struct_2f2B3fB3f
    if _struct_2f2B3fB3f is None:
        _struct_2f2B3fB3f = struct.Struct("<2f2B3fB3f")
    return _struct_2f2B3fB3f
_struct_iIi3fi = None
def _get_struct_iIi3fi():
    global _struct_iIi3fi
    if _struct_iIi3fi is None:
        _struct_iIi3fi = struct.Struct("<iIi3fi")
    return _struct_iIi3fi
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_4Bf = None
def _get_struct_4Bf():
    global _struct_4Bf
    if _struct_4Bf is None:
        _struct_4Bf = struct.Struct("<4Bf")
    return _struct_4Bf
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from lxind_msgs/SendSubTaskResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SendSubTaskResponse(genpy.Message):
  _md5sum = "8d9c3b918a0afafe09791ef8d7853918"
  _type = "lxind_msgs/SendSubTaskResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool succeed
"""
  __slots__ = ['succeed']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       succeed

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SendSubTaskResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.succeed is None:
        self.succeed = False
    else:
      self.succeed = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_B().pack(self.succeed))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 1
      (self.succeed,) = _get_struct_B().unpack(str[start:end])
      self.succeed = bool(self.succeed)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_get_struct_B().pack(self.succeed))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.succeed,) = _get_struct_B().unpack(str[start:end])
      self.succeed = bool(self.succeed)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class SendSubTask(object):
  _type          = 'lxind_msgs/SendSubTask'
  _md5sum = 'ded50bd33fc998583d1657965f147705'
  _request_class  = SendSubTaskRequest
  _response_class = SendSubTaskResponse
