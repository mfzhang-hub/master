# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from lxind_msgs/GetNavStatusRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GetNavStatusRequest(genpy.Message):
  _md5sum = "d41d8cd98f00b204e9800998ecf8427e"
  _type = "lxind_msgs/GetNavStatusRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """"""
  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetNavStatusRequest, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from lxind_msgs/GetNavStatusResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class GetNavStatusResponse(genpy.Message):
  _md5sum = "db378f79657e7f13f64098eef9409889"
  _type = "lxind_msgs/GetNavStatusResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int8 GOAL_NOT_REACHED=0
int8 GOAL_REACHED=1
int8 GOAL_APPROACHING=2

int8 STATE_ADJUST=0
int8 STATE_WAIT=1
int8 STATE_FORWARD=2
int8 STATE_FINISHED=3

geometry_msgs/Pose2D curr_posi
int8 reach_state
int8 prec_state

================================================================================
MSG: geometry_msgs/Pose2D
# This expresses a position and orientation on a 2D manifold.

float64 x
float64 y
float64 theta"""
  # Pseudo-constants
  GOAL_NOT_REACHED = 0
  GOAL_REACHED = 1
  GOAL_APPROACHING = 2
  STATE_ADJUST = 0
  STATE_WAIT = 1
  STATE_FORWARD = 2
  STATE_FINISHED = 3

  __slots__ = ['curr_posi','reach_state','prec_state']
  _slot_types = ['geometry_msgs/Pose2D','int8','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       curr_posi,reach_state,prec_state

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetNavStatusResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.curr_posi is None:
        self.curr_posi = geometry_msgs.msg.Pose2D()
      if self.reach_state is None:
        self.reach_state = 0
      if self.prec_state is None:
        self.prec_state = 0
    else:
      self.curr_posi = geometry_msgs.msg.Pose2D()
      self.reach_state = 0
      self.prec_state = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3d2b().pack(_x.curr_posi.x, _x.curr_posi.y, _x.curr_posi.theta, _x.reach_state, _x.prec_state))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.curr_posi is None:
        self.curr_posi = geometry_msgs.msg.Pose2D()
      end = 0
      _x = self
      start = end
      end += 26
      (_x.curr_posi.x, _x.curr_posi.y, _x.curr_posi.theta, _x.reach_state, _x.prec_state,) = _get_struct_3d2b().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3d2b().pack(_x.curr_posi.x, _x.curr_posi.y, _x.curr_posi.theta, _x.reach_state, _x.prec_state))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.curr_posi is None:
        self.curr_posi = geometry_msgs.msg.Pose2D()
      end = 0
      _x = self
      start = end
      end += 26
      (_x.curr_posi.x, _x.curr_posi.y, _x.curr_posi.theta, _x.reach_state, _x.prec_state,) = _get_struct_3d2b().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3d2b = None
def _get_struct_3d2b():
    global _struct_3d2b
    if _struct_3d2b is None:
        _struct_3d2b = struct.Struct("<3d2b")
    return _struct_3d2b
class GetNavStatus(object):
  _type          = 'lxind_msgs/GetNavStatus'
  _md5sum = 'db378f79657e7f13f64098eef9409889'
  _request_class  = GetNavStatusRequest
  _response_class = GetNavStatusResponse
