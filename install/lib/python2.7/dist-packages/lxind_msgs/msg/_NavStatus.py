# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from lxind_msgs/NavStatus.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class NavStatus(genpy.Message):
  _md5sum = "8a35a9787387d868191ef61d5a4d021f"
  _type = "lxind_msgs/NavStatus"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """int8 GOAL_NOT_REACHED=0
int8 GOAL_REACHED=1
int8 GOAL_APPROACHING=2

Header header

int64 latest_task_id

geometry_msgs/Pose2D curr_posi

int32 pre_point
int32 next_point

int32 is_exist_task

int32 robot_state
int8 reach_state

int32 carry_state
int32 roller_state
int32 shape_type
int32 cur_route_id
int32 cargo_count

int32 exception

float64[] shape
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Pose2D
# This expresses a position and orientation on a 2D manifold.

float64 x
float64 y
float64 theta"""
  # Pseudo-constants
  GOAL_NOT_REACHED = 0
  GOAL_REACHED = 1
  GOAL_APPROACHING = 2

  __slots__ = ['header','latest_task_id','curr_posi','pre_point','next_point','is_exist_task','robot_state','reach_state','carry_state','roller_state','shape_type','cur_route_id','cargo_count','exception','shape']
  _slot_types = ['std_msgs/Header','int64','geometry_msgs/Pose2D','int32','int32','int32','int32','int8','int32','int32','int32','int32','int32','int32','float64[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,latest_task_id,curr_posi,pre_point,next_point,is_exist_task,robot_state,reach_state,carry_state,roller_state,shape_type,cur_route_id,cargo_count,exception,shape

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(NavStatus, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.latest_task_id is None:
        self.latest_task_id = 0
      if self.curr_posi is None:
        self.curr_posi = geometry_msgs.msg.Pose2D()
      if self.pre_point is None:
        self.pre_point = 0
      if self.next_point is None:
        self.next_point = 0
      if self.is_exist_task is None:
        self.is_exist_task = 0
      if self.robot_state is None:
        self.robot_state = 0
      if self.reach_state is None:
        self.reach_state = 0
      if self.carry_state is None:
        self.carry_state = 0
      if self.roller_state is None:
        self.roller_state = 0
      if self.shape_type is None:
        self.shape_type = 0
      if self.cur_route_id is None:
        self.cur_route_id = 0
      if self.cargo_count is None:
        self.cargo_count = 0
      if self.exception is None:
        self.exception = 0
      if self.shape is None:
        self.shape = []
    else:
      self.header = std_msgs.msg.Header()
      self.latest_task_id = 0
      self.curr_posi = geometry_msgs.msg.Pose2D()
      self.pre_point = 0
      self.next_point = 0
      self.is_exist_task = 0
      self.robot_state = 0
      self.reach_state = 0
      self.carry_state = 0
      self.roller_state = 0
      self.shape_type = 0
      self.cur_route_id = 0
      self.cargo_count = 0
      self.exception = 0
      self.shape = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_q3d4ib6i().pack(_x.latest_task_id, _x.curr_posi.x, _x.curr_posi.y, _x.curr_posi.theta, _x.pre_point, _x.next_point, _x.is_exist_task, _x.robot_state, _x.reach_state, _x.carry_state, _x.roller_state, _x.shape_type, _x.cur_route_id, _x.cargo_count, _x.exception))
      length = len(self.shape)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.shape))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.curr_posi is None:
        self.curr_posi = geometry_msgs.msg.Pose2D()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 73
      (_x.latest_task_id, _x.curr_posi.x, _x.curr_posi.y, _x.curr_posi.theta, _x.pre_point, _x.next_point, _x.is_exist_task, _x.robot_state, _x.reach_state, _x.carry_state, _x.roller_state, _x.shape_type, _x.cur_route_id, _x.cargo_count, _x.exception,) = _get_struct_q3d4ib6i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.shape = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_q3d4ib6i().pack(_x.latest_task_id, _x.curr_posi.x, _x.curr_posi.y, _x.curr_posi.theta, _x.pre_point, _x.next_point, _x.is_exist_task, _x.robot_state, _x.reach_state, _x.carry_state, _x.roller_state, _x.shape_type, _x.cur_route_id, _x.cargo_count, _x.exception))
      length = len(self.shape)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.shape.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.curr_posi is None:
        self.curr_posi = geometry_msgs.msg.Pose2D()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 73
      (_x.latest_task_id, _x.curr_posi.x, _x.curr_posi.y, _x.curr_posi.theta, _x.pre_point, _x.next_point, _x.is_exist_task, _x.robot_state, _x.reach_state, _x.carry_state, _x.roller_state, _x.shape_type, _x.cur_route_id, _x.cargo_count, _x.exception,) = _get_struct_q3d4ib6i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.shape = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_q3d4ib6i = None
def _get_struct_q3d4ib6i():
    global _struct_q3d4ib6i
    if _struct_q3d4ib6i is None:
        _struct_q3d4ib6i = struct.Struct("<q3d4ib6i")
    return _struct_q3d4ib6i
