# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from lxind_msgs/BatteryStatus.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class BatteryStatus(genpy.Message):
  _md5sum = "f6f8fc4b6b259d41d09594bdb61f71f5"
  _type = "lxind_msgs/BatteryStatus"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header

uint16 voltage
int16 current

uint16 remain_bat
uint16 full_bat

uint16[] cell_volt
uint16[] tempterature
uint16    batt_cycle
uint16    design_capacity

uint8 remaining_percentage 
bool is_charging
bool is_battery_low
bool is_battery_full

string port
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  __slots__ = ['header','voltage','current','remain_bat','full_bat','cell_volt','tempterature','batt_cycle','design_capacity','remaining_percentage','is_charging','is_battery_low','is_battery_full','port']
  _slot_types = ['std_msgs/Header','uint16','int16','uint16','uint16','uint16[]','uint16[]','uint16','uint16','uint8','bool','bool','bool','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,voltage,current,remain_bat,full_bat,cell_volt,tempterature,batt_cycle,design_capacity,remaining_percentage,is_charging,is_battery_low,is_battery_full,port

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BatteryStatus, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.voltage is None:
        self.voltage = 0
      if self.current is None:
        self.current = 0
      if self.remain_bat is None:
        self.remain_bat = 0
      if self.full_bat is None:
        self.full_bat = 0
      if self.cell_volt is None:
        self.cell_volt = []
      if self.tempterature is None:
        self.tempterature = []
      if self.batt_cycle is None:
        self.batt_cycle = 0
      if self.design_capacity is None:
        self.design_capacity = 0
      if self.remaining_percentage is None:
        self.remaining_percentage = 0
      if self.is_charging is None:
        self.is_charging = False
      if self.is_battery_low is None:
        self.is_battery_low = False
      if self.is_battery_full is None:
        self.is_battery_full = False
      if self.port is None:
        self.port = ''
    else:
      self.header = std_msgs.msg.Header()
      self.voltage = 0
      self.current = 0
      self.remain_bat = 0
      self.full_bat = 0
      self.cell_volt = []
      self.tempterature = []
      self.batt_cycle = 0
      self.design_capacity = 0
      self.remaining_percentage = 0
      self.is_charging = False
      self.is_battery_low = False
      self.is_battery_full = False
      self.port = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_Hh2H().pack(_x.voltage, _x.current, _x.remain_bat, _x.full_bat))
      length = len(self.cell_volt)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(struct.pack(pattern, *self.cell_volt))
      length = len(self.tempterature)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(struct.pack(pattern, *self.tempterature))
      _x = self
      buff.write(_get_struct_2H4B().pack(_x.batt_cycle, _x.design_capacity, _x.remaining_percentage, _x.is_charging, _x.is_battery_low, _x.is_battery_full))
      _x = self.port
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.voltage, _x.current, _x.remain_bat, _x.full_bat,) = _get_struct_Hh2H().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      end += struct.calcsize(pattern)
      self.cell_volt = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      end += struct.calcsize(pattern)
      self.tempterature = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 8
      (_x.batt_cycle, _x.design_capacity, _x.remaining_percentage, _x.is_charging, _x.is_battery_low, _x.is_battery_full,) = _get_struct_2H4B().unpack(str[start:end])
      self.is_charging = bool(self.is_charging)
      self.is_battery_low = bool(self.is_battery_low)
      self.is_battery_full = bool(self.is_battery_full)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.port = str[start:end].decode('utf-8')
      else:
        self.port = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_Hh2H().pack(_x.voltage, _x.current, _x.remain_bat, _x.full_bat))
      length = len(self.cell_volt)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(self.cell_volt.tostring())
      length = len(self.tempterature)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(self.tempterature.tostring())
      _x = self
      buff.write(_get_struct_2H4B().pack(_x.batt_cycle, _x.design_capacity, _x.remaining_percentage, _x.is_charging, _x.is_battery_low, _x.is_battery_full))
      _x = self.port
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.voltage, _x.current, _x.remain_bat, _x.full_bat,) = _get_struct_Hh2H().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      end += struct.calcsize(pattern)
      self.cell_volt = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      end += struct.calcsize(pattern)
      self.tempterature = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=length)
      _x = self
      start = end
      end += 8
      (_x.batt_cycle, _x.design_capacity, _x.remaining_percentage, _x.is_charging, _x.is_battery_low, _x.is_battery_full,) = _get_struct_2H4B().unpack(str[start:end])
      self.is_charging = bool(self.is_charging)
      self.is_battery_low = bool(self.is_battery_low)
      self.is_battery_full = bool(self.is_battery_full)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.port = str[start:end].decode('utf-8')
      else:
        self.port = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_2H4B = None
def _get_struct_2H4B():
    global _struct_2H4B
    if _struct_2H4B is None:
        _struct_2H4B = struct.Struct("<2H4B")
    return _struct_2H4B
_struct_Hh2H = None
def _get_struct_Hh2H():
    global _struct_Hh2H
    if _struct_Hh2H is None:
        _struct_Hh2H = struct.Struct("<Hh2H")
    return _struct_Hh2H
